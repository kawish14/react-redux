import { decodeValues, queryFeatures } from '@esri/arcgis-rest-feature-layer';
import config from '../config';
import { createQueryParams } from './url';
export function queryDatasets(datasets) {
    var names = [];
    var requests = [];
    if (datasets) {
        datasets.forEach(function (dataset, i) {
            // only query datasets that don't have inline data
            if (dataset.url) {
                // TODO: make name required on datasets, or required if > 1 dataset?
                names.push(dataset.name || "dataset" + i);
                var queryParams = createQueryParams(dataset.query);
                var options_1 = {
                    url: dataset.url,
                    params: queryParams
                };
                if (config.fetch && typeof config.fetch === 'function') {
                    // we are configured to use a custom fetch implementation
                    // send that along to rest-js
                    options_1.fetch = config.fetch;
                }
                requests.push(queryFeatures(options_1)
                    .then(function (queryResponse) {
                    var domains = dataset.domains;
                    var fields = domains && Object.keys(domains).map(function (name) { return ({ name: name, domain: domains[name] }); });
                    // for now, we only decode CVDs when an array of fields is passed describing codes and names
                    if (fields && fields.length > 0) {
                        var decodeOptions = {
                            url: options_1.url,
                            queryResponse: queryResponse,
                            // TODO: decodeValues() should take `domains?: IDomains` as an alternative to `fields?: IField[]`
                            fields: fields,
                            fetch: config.fetch
                        };
                        return decodeValues(decodeOptions);
                    }
                    else {
                        return queryResponse;
                    }
                }));
            }
        });
    }
    return Promise.all(requests)
        .then(function (responses) {
        // turn the array of responses into a hash keyed off the dataset names
        var responseHash = responses.reduce(function (hash, response, i) {
            hash[names[i]] = response;
            return hash;
        }, {});
        return Promise.resolve(responseHash);
    });
}
//# sourceMappingURL=query.js.map