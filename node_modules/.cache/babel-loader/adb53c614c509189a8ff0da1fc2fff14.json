{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nexport var addComment = function addComment(comment) {\n  return {\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n  };\n};\nexport var postComment = function postComment(dishId, rating, author, comment) {\n  return function (dispatch) {\n    var newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n    };\n    newComment.date = new Date().toISOString();\n    return fetch(baseUrl + 'comments', {\n      method: \"POST\",\n      body: JSON.stringify(newComment),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n    }).then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      throw error;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      return dispatch(addComment(response));\n    }).catch(function (error) {\n      console.log('post comments', error.message);\n      alert('Your comment could not be posted\\nError: ' + error.message);\n    });\n  };\n};\nexport var postFeedBack = function postFeedBack(dishId, rating, author, comment) {\n  return function (dispatch) {\n    var newComment = {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n    };\n    newComment.date = new Date().toISOString();\n    return fetch(baseUrl + 'comments', {\n      method: \"POST\",\n      body: JSON.stringify(newComment),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"same-origin\"\n    }).then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      throw error;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      return dispatch(addComment(response));\n    }).catch(function (error) {\n      console.log('post comments', error.message);\n      alert('Your comment could not be posted\\nError: ' + error.message);\n    });\n  };\n};\nexport var fetchDishes = function fetchDishes() {\n  return function (dispatch) {\n    dispatch(dishesLoading(true));\n    return fetch(baseUrl + 'dishes').then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error' + response.status + ':' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (dishes) {\n      return dispatch(addDishes(dishes));\n    }).catch(function (error) {\n      return dispatch(dishesFailed(error.message));\n    });\n  };\n};\nexport var dishesLoading = function dishesLoading() {\n  return {\n    type: ActionTypes.DISHES_LOADING\n  };\n};\nexport var dishesFailed = function dishesFailed(errmess) {\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport var addDishes = function addDishes(dishes) {\n  return {\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n  };\n};\nexport var fetchComments = function fetchComments() {\n  return function (dispatch) {\n    return fetch(baseUrl + 'comments').then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error' + response.status + ':' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (comments) {\n      return dispatch(addComments(comments));\n    }).catch(function (error) {\n      return dispatch(commentsFailed(error.message));\n    });\n  };\n};\nexport var commentsFailed = function commentsFailed(errmess) {\n  return {\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n  };\n};\nexport var addComments = function addComments(comments) {\n  return {\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n  };\n};\nexport var fetchPromos = function fetchPromos() {\n  return function (dispatch) {\n    dispatch(promosLoading());\n    return fetch(baseUrl + 'promotions').then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error' + response.status + ':' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (promos) {\n      return dispatch(addPromos(promos));\n    }).catch(function (error) {\n      return dispatch(promosFailed(error.message));\n    });\n  };\n};\nexport var promosLoading = function promosLoading() {\n  return {\n    type: ActionTypes.PROMOS_LOADING\n  };\n};\nexport var promosFailed = function promosFailed(errmess) {\n  return {\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n  };\n};\nexport var addPromos = function addPromos(promos) {\n  return {\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n  };\n};\nexport var fetchLeader = function fetchLeader() {\n  return function (dispatch) {\n    dispatch(leaderLoading());\n    return fetch(baseUrl + 'leaders').then(function (response) {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error' + response.status + ':' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, function (error) {\n      var errmess = new Error(error.message);\n      throw errmess;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (leader) {\n      return dispatch(addLeader(leader));\n    }).catch(function (error) {\n      return dispatch(leaderFailed(error.message));\n    });\n  };\n};\nexport var leaderLoading = function leaderLoading() {\n  return {\n    type: ActionTypes.LEADER_LOADING\n  };\n};\nexport var leaderFailed = function leaderFailed(errmess) {\n  return {\n    type: ActionTypes.LEADER_FAILED,\n    payload: errmess\n  };\n};\nexport var addLeader = function addLeader(leader) {\n  return {\n    type: ActionTypes.ADD_LEADER,\n    payload: leader\n  };\n};","map":{"version":3,"sources":["G:/courseara/2-Frontend Web Development with React/catering/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","postFeedBack","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeader","leaderLoading","leader","addLeader","leaderFailed","LEADER_LOADING","LEADER_FAILED","ADD_LEADER"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) =>{\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n}\r\n\r\nexport const postFeedBack = (dishId, rating, author, comment) => (dispatch) =>{\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n}\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response\r\n        }\r\n        else{\r\n            var error = new Error('Error' + response.status + ':' + response.statusText)\r\n            error.response = response\r\n            throw error\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message)\r\n        throw errmess\r\n    })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)))\r\n    \r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response\r\n        }\r\n        else{\r\n            var error = new Error('Error' + response.status + ':' + response.statusText)\r\n            error.response = response\r\n            throw error\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message)\r\n        throw errmess\r\n    })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error=> dispatch(commentsFailed(error.message)))\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response\r\n        }\r\n        else{\r\n            var error = new Error('Error' + response.status + ':' + response.statusText)\r\n            error.response = response\r\n            throw error\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message)\r\n        throw errmess\r\n    })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)))\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\nexport const fetchLeader = () => (dispatch) => {    \r\n\r\n    dispatch(leaderLoading());\r\n    \r\n    return fetch(baseUrl + 'leaders')\r\n    .then(response => {\r\n        if(response.ok){\r\n            return response\r\n        }\r\n        else{\r\n            var error = new Error('Error' + response.status + ':' + response.statusText)\r\n            error.response = response\r\n            throw error\r\n        }\r\n    },\r\n    error => {\r\n        var errmess = new Error(error.message)\r\n        throw errmess\r\n    })\r\n    .then(response => response.json())\r\n    .then(leader => dispatch(addLeader(leader)))\r\n    .catch(error=> dispatch(leaderFailed(error.message))) \r\n};\r\nexport const leaderLoading = () => ({\r\n    type: ActionTypes.LEADER_LOADING\r\n});\r\n export const leaderFailed = (errmess) => ({\r\n    type: ActionTypes.LEADER_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeader = (leader) => ({\r\n    type: ActionTypes.ADD_LEADER,\r\n    payload: leader\r\n});"]},"metadata":{},"sourceType":"module"}